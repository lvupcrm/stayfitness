---
description:
globs:
alwaysApply: true
---
# Technical Requirements Document (TRD)

## 1. Executive Technical Summary
- **프로젝트 개요**  
  모바일 우선 랜딩페이지를 Next.js(SSR/ISR) 기반으로 구축하고, Supabase(Postgres·Storage)로 데이터 저장·CMS 연동·인증을 처리합니다. Vercel을 통한 CI/CD 및 CDN 배포로 빠른 퍼포먼스와 글로벌 가용성을 확보하며, 카카오톡·Slack·GA4 연동으로 실시간 상담·리드 관리를 구현합니다.
- **핵심 기술 스택**  
  Frontend: Next.js, TailwindCSS, Framer Motion  
  Backend as a Service: Supabase (Postgres, Storage, Edge Functions)  
  배포·호스팅: Vercel (CDN, 자동 HTTPS)  
  분석·모니터링: Google Analytics 4, Search Console  
- **주요 기술 목표**  
  • LCP ≤2.5s, CLS <0.1 유지  
  • 방문→상담 클릭 전환율 20% 달성  
  • 월간 리드 500건 이상 수집  
- **핵심 기술 가정**  
  • 사용자 트래픽 성장 시 Supabase와 Vercel의 서버리스 확장성으로 대응 가능  
  • Next.js ISR을 통해 실시간 콘텐츠 업데이트와 SEO 최적화 병행  
  • Supabase RLS 및 HTTPS 기본 제공으로 보안 요구사항 충족  

## 2. Tech Stack

| Category              | Technology / Library     | Reasoning (선택 이유)                                        |
| --------------------- | ------------------------ | ---------------------------------------------------------- |
| Frontend Framework    | Next.js                  | SSR/ISR 지원, SEO 최적화, Vercel 통합 간편                    |
| Styling               | TailwindCSS              | 유틸리티 클래스 기반, 빠른 개발 속도 및 유지보수 용이         |
| Animation             | Framer Motion            | 간단한 모션 효과 구현, 성능 영향 최소                         |
| BaaS & Database       | Supabase (Postgres)      | RLS 보안, CRUD API·Auth·Storage 통합, 빠른 PoC                |
| Hosting & CDN         | Vercel                   | Next.js 최적화 배포, 자동 HTTPS 및 글로벌 CDN 제공            |
| CMS / Content         | Supabase Tables + RLS    | 간단한 블로그/공지 관리, row-level security                  |
| Analytics & SEO       | GA4, Google Search Console | 이벤트 트래킹·리포팅, 메타 태그·sitemap 자동 생성            |
| Internationalization  | next-i18next             | Next.js 환경에서 간편한 다국어 지원                          |
| Notification & Chat   | KakaoTalk URL + Slack Webhook | 카카오톡 상담 이동, Slack 알림으로 CRM 연동                     |
| Form Handling         | React Hook Form          | 폼 검증·에러 관리 간편                                       |
| CI/CD                 | Vercel CI/CD             | Git 연동 자동 배포, 프리뷰 환경 제공                          |

## 3. System Architecture Design

### Top-Level building blocks
- **Next.js 애플리케이션**  
  - SSR/ISR 페이지, 모바일 우선 UI, SEO 메타 자동 생성  
- **Supabase 서비스**  
  - Postgres 데이터베이스: 리드·상담 로그·트레이너·프로그램·후기 테이블  
  - Storage: 이미지·OG 이미지 저장  
  - Edge Functions: 서버리스 백엔드 로직(폼 제출, Slack 알림)  
- **Third-Party Integrations**  
  - 카카오톡 상담 URL, Slack Webhook, GA4 이벤트, Search Console  
- **Hosting & CDN**  
  - Vercel: 글로벌 CDN, 자동 HTTPS, 프리뷰 환경  
- **CI/CD 파이프라인**  
  - Git Push → Vercel 배포 → Preview & Production 구분

### Top-Level Component Interaction Diagram
```mermaid
graph TD
    A[브라우저(모바일)] --> B[Next.js SSR/ISR]
    B --> C[Supabase Postgres]
    B --> D[Supabase Storage]
    B --> E[Edge Functions]
    E --> F[Slack Webhook]
    A --> G[KakaoTalk URL]
    B --> H[GA4, Search Console]
    B --> I[Vercel CDN]
```
- 브라우저는 Next.js SSR/ISR 페이지에 접근해 컨텐츠 요청  
- Next.js는 Supabase Postgres와 Storage에서 데이터 로드  
- 리드 제출 시 Edge Functions가 Slack Webhook 호출  
- 카카오톡 상담 버튼은 외부 URL로 연결  
- 페이지 뷰·이벤트는 GA4 및 Search Console에 전송  
- 최종 콘텐츠는 Vercel CDN을 통해 전송

### Code Organization & Convention

**Domain-Driven Organization Strategy**  
- **도메인 분리**: user(리드/상담), content(블로그/공지), center(프로그램/후기), trainer(트레이너 프로필)  
- **레이어 기반 아키텍처**: presentation(페이지·컴포넌트), domain(비즈니스 로직), data(accessor), infra(연동·설정)  
- **기능 단위 모듈**: 각 도메인 별 React 컴포넌트·hooks·유틸리티 묶음  
- **공유 컴포넌트**: UI 버튼·레이아웃·타이포그래피 등 `/components/common`  

**Universal File & Folder Structure**
```
/
├── public
│   ├── images
│   └── robots.txt
├── src
│   ├── pages
│   │   ├── index.tsx
│   │   ├── _app.tsx
│   │   └── [lang]/
│   ├── components
│   │   ├── common
│   │   ├── lead-form
│   │   ├── trainer-card
│   │   └── kakao-banner
│   ├── lib
│   │   ├── supabaseClient.ts
│   │   └── analytics.ts
│   ├── domain
│   │   ├── lead
│   │   ├── content
│   │   └── trainer
│   ├── styles
│   │   └── globals.css
│   ├── utils
│   │   └── i18n.ts
│   └── edge-functions
│       └── onLeadSubmit/index.ts
├── .vercel
├── next.config.js
├── package.json
└── tailwind.config.js
```

### Data Flow & Communication Patterns
- **Client-Server 통신**: Next.js API 라우트 또는 Edge Functions 사용, RESTful 요청/응답  
- **DB 상호작용**: Supabase JS SDK 통한 쿼리·ORM 수준으로 CRUD 처리, RLS 적용  
- **외부 서비스 연동**: 카카오톡 상담 URL, Slack Webhook POST, GA4 이벤트 전송  
- **실시간 통신**: 필요 시 SSE나 WebSocket 대신 ISR로 새 콘텐츠 반영  
- **데이터 동기화**: ISR(Incremental Static Regeneration) 주기적 페이지 갱신

## 4. Performance & Optimization Strategy
- 이미지 최적화: Next.js Image 컴포넌트 및 Supabase Storage 최적화 버전 사용  
- 코드 분할: dynamic import 및 페이지별 청크 분리로 초기 로드 감소  
- ISR 주기 조정: 중요한 섹션 빠른 갱신, 불필요 빌드 최소화  
- Lighthouse 모니터링: CI 파이프라인에 성능 검사 도입

## 5. Implementation Roadmap & Milestones

### Phase 1: Foundation (MVP Implementation)
- **Core Infrastructure**: Next.js 프로젝트, Supabase 초기 테이블·RLS 설정, Vercel 배포 파이프라인  
- **Essential Features**: 모바일 레이아웃, 소개·프로그램·후기 섹션, 카카오톡 배너, 리드 폼, GA 이벤트  
- **Basic Security**: RLS 기본 정책, HTTPS, CSP 헤더  
- **Development Setup**: Git→Vercel CI, Pre-commit 훅, 환경 변수 관리  
- **Timeline**: W2~W4

### Phase 2: Feature Enhancement
- **Advanced Features**: 다국어 토글, 블로그 CMS, 트레이너 모달 상세 뷰  
- **Performance Optimization**: Lighthouse 자동 리포트, CDN 캐시 튜닝  
- **Enhanced Security**: CSP 강화, 스캐닝 툴 도입  
- **Monitoring Implementation**: Sentry 에러 트래킹, GA4 심층 분석  
- **Timeline**: W5~W7

### Phase 3: Scaling & Optimization
- **Scalability Implementation**: Supabase Edge Functions 추가, Vercel Serverless 함수 확장  
- **Advanced Integrations**: 카카오페이 결제 모듈, CRM 연동  
- **Enterprise Features**: 예약·결제, 관리자 대시보드  
- **Compliance & Auditing**: 개인정보보호법·GDPR 대응  
- **Timeline**: W8~W10

## 6. Risk Assessment & Mitigation Strategies

### Technical Risk Analysis
- **기술 리스크**: Supabase RLS 복잡도 → PoC 및 초기 문서화  
- **성능 리스크**: SSR 빌드 지연 → ISR 주기·Incremental 캐시 정책 활용  
- **보안 리스크**: XSS·CSRF → CSP 설정·Edge Function 검증  
- **통합 리스크**: Slack·카카오톡 API 변경 → 인터페이스 추상화 계층 구현  
- **Mitigation**: 초기 PoC, 모니터링 툴, 문서화, 테스트 자동화

### Project Delivery Risks
- **일정 리스크**: 디자인·개발 병목 → 크로스 기능 스쿼드 운영  
- **리소스 리스크**: Supabase 경험 부족 → 사전 워크숍·교육  
- **품질 리스크**: 테스트 커버리지 부족 → Jest·React Testing Library 도입  
- **배포 리스크**: 프로덕션 롤백 → Vercel Preview PR 전략, Canary 배포  
- **Contingency Plans**: 기존 정적 호스팅 백업, 대체 BaaS 탐색 (Firebase)


