{
  "rules": [
    {
      "type": "prd",
      "content": "# 제품 요구사항 문서 (PRD)\n\n## 1. 개요\n스테이피트니스의 신규 웹 랜딩페이지를 구축하여 기존 회원과 잠재고객이 센터 정보·프로그램·프로모션을 한눈에 확인하고, 카카오톡 배너를 통해 즉시 상담·예약을 진행할 수 있도록 한다.  \n주요 효과: 브랜드 신뢰도 상승, 리드 생성 증대, 오프라인 방문 유도.\n\n## 2. 문제 정의\n- 현재 센터 소개 채널이 SNS에 한정되어 정보가 분산·비정형적임.  \n- 온라인 문의/예약 경로가 불명확해 고객 이탈이 발생.  \n- 모바일 최적화된 랜딩페이지가 없어 광고 집행 시 전환율이 낮음.  \n- 회원 후기·프로그램 정보가 체계적으로 제공되지 않아 경쟁 센터 대비 차별점 전달 부족.\n\n## 3. 목표 및 목적\n- 1차 목표: 모바일 중심 랜딩페이지 MVP 오픈\n- 2차 목표: 리드 전환률 15% 이상 확보, 월평균 방문자 5,000명 달성\n- 성공 지표  \n  • 방문→상담 클릭 전환율 20%  \n  • 카카오톡 문의수 월 500건  \n  • SEO 키워드 TOP10 5개 이상  \n\n## 4. 타깃 사용자\n### 주요 사용자\n- 20~40대 직장인·학생, 헬스·PT 관심, 모바일 검색 선호\n- 니즈: 가격·프로그램 비교, 빠른 상담 채널, 실내·트레이너 분위기 확인\n### 2차 이해관계자\n- 센터 매니저: 상담 리드 확보, 예약 관리\n- 트레이너: 본인 프로필 노출, 신규 회원 유치\n- 마케팅 팀: 광고 랜딩, 데이터 분석\n\n## 5. 사용자 스토리\n- “헬스장을 찾는 30대 직장인으로서, 모바일로 프로그램 가격을 즉시 확인해 비교할 수 있어야 등록 결정을 빠르게 할 수 있다.”\n- “센터 매니저로서, 카카오톡으로 들어온 상담을 CRM에 자동 기록해 후속 관리를 효율화하고 싶다.”\n- “트레이너로서, 내 이력을 랜딩페이지에서 소개해 전문성을 알리고 싶다.”\n\n## 6. 기능 요구사항\n### 핵심 기능\n1. 랜딩페이지 정보 섹션  \n   • 소개, 프로그램·가격표, 시설 사진, 회원 후기, 위치·주차 안내  \n   • 수락 기준: 모든 섹션 페이지 로드 시간 <2s, 모바일 레이아웃 깨짐 없음\n2. 카카오톡 상담 배너  \n   • 고정 플로팅 버튼 및 섹션 내 CTA 버튼 두 가지 형태  \n   • 클릭 시 `https://pf.kakao.com/...` 새 창 연결, GA 이벤트 기록\n3. 리드 폼(이름/전화/관심프로그램)  \n   • 제출 시 Supabase 테이블 저장·Slack 알림  \n   • 필수값 누락 시 에러 표시\n\n### 지원 기능\n- SEO 최적화: 메타 태그, OG 이미지, sitemap 자동 생성  \n- 다국어(국문/영문) 토글  \n- 트레이너 프로필 카드 + 상세 모달  \n- 블로그/공지 CMS 연동(Supabase row level security)  \n- 구글 애널리틱스·서치콘솔 연동\n\n## 7. 비기능 요구사항\n- 성능: LCP ≤2.5s, CLS <0.1  \n- 보안: Supabase Row-Level Security, HTTPS 기본  \n- 사용성: WCAG 2.1 AA 준수, 모바일 우선 디자인  \n- 확장성: 모듈러 컴포넌트, 서버리스 함수 활용  \n- 호환성: 최신 크롬·사파리·삼성인터넷·Edge, iOS/Android\n\n## 8. 기술 고려 사항\n- 아키텍처: Next.js(SSR/ISR) + Supabase(Postgres, Storage)  \n- 배포: Vercel, CDN 자동 적용  \n- 데이터: 리드 테이블, 상담 로그, 트레이너, 프로그램, 후기  \n- 통합: KakaoTalk 채널, Slack Webhook, GA4, Sitemap 자동 생성  \n- 3rd Party: TailwindCSS, Framer Motion(애니메이션)\n\n## 9. 성공 지표\n- 사용자 지표: 순방문자, 세션당 페이지뷰, CTA 클릭률  \n- 비즈니스 지표: 월 리드 건수, 실제 등록 전환율, 광고 ROI  \n- 기술 지표: 페이지 성능 점수 ≥90(Lighthouse), 오류율 <1%\n\n## 10. 일정 및 마일스톤\n| 단계 | 기간 | 주요 산출물 |\n|---|---|---|\n| 기획 확정 | W1 | 와이어프레임, 정보구조 |\n| 디자인·개발 MVP | W2~W4 | 랜딩페이지, 카카오톡 배너, 리드 폼 |\n| QA·SEO | W5 | 크로스브라우저 테스트, 성능 튜닝 |\n| 런칭 | W6 | 도메인 연결, 데이터 수집 시작 |\n| 기능 고도화 | W7~W10 | 블로그 CMS, 트레이너 프로필, 다국어 |\n\n## 11. 위험 요소 및 대응\n- 기술 적합도: Supabase 러닝커브 → PoC 사전 진행  \n- SEO 지연: SSR 오류 대비 모니터링 툴 설치  \n- 리드 데이터 유실: 백업 정책(매일 스냅샷)  \n- 사용자 유입 저조: 오프라인 배너·SNS 광고 충분한 예산 확보\n\n## 12. 향후 발전 방향\n- 온라인 PT 예약 및 결제 모듈 연동(카카오페이, 카드)  \n- 커뮤니티 포럼·식단 관리 툴  \n- AI 트레이너 챗봇(운동 질문 자동 답변)  \n- 회원 전용 모바일 앱 연계 (React Native)",
      "writedAt": "2025-07-17T01:36:26.578Z"
    },
    {
      "type": "architecture",
      "content": "# Technical Requirements Document (TRD)\n\n## 1. Executive Technical Summary\n- **프로젝트 개요**  \n  모바일 우선 랜딩페이지를 Next.js(SSR/ISR) 기반으로 구축하고, Supabase(Postgres·Storage)로 데이터 저장·CMS 연동·인증을 처리합니다. Vercel을 통한 CI/CD 및 CDN 배포로 빠른 퍼포먼스와 글로벌 가용성을 확보하며, 카카오톡·Slack·GA4 연동으로 실시간 상담·리드 관리를 구현합니다.\n- **핵심 기술 스택**  \n  Frontend: Next.js, TailwindCSS, Framer Motion  \n  Backend as a Service: Supabase (Postgres, Storage, Edge Functions)  \n  배포·호스팅: Vercel (CDN, 자동 HTTPS)  \n  분석·모니터링: Google Analytics 4, Search Console  \n- **주요 기술 목표**  \n  • LCP ≤2.5s, CLS <0.1 유지  \n  • 방문→상담 클릭 전환율 20% 달성  \n  • 월간 리드 500건 이상 수집  \n- **핵심 기술 가정**  \n  • 사용자 트래픽 성장 시 Supabase와 Vercel의 서버리스 확장성으로 대응 가능  \n  • Next.js ISR을 통해 실시간 콘텐츠 업데이트와 SEO 최적화 병행  \n  • Supabase RLS 및 HTTPS 기본 제공으로 보안 요구사항 충족  \n\n## 2. Tech Stack\n\n| Category              | Technology / Library     | Reasoning (선택 이유)                                        |\n| --------------------- | ------------------------ | ---------------------------------------------------------- |\n| Frontend Framework    | Next.js                  | SSR/ISR 지원, SEO 최적화, Vercel 통합 간편                    |\n| Styling               | TailwindCSS              | 유틸리티 클래스 기반, 빠른 개발 속도 및 유지보수 용이         |\n| Animation             | Framer Motion            | 간단한 모션 효과 구현, 성능 영향 최소                         |\n| BaaS & Database       | Supabase (Postgres)      | RLS 보안, CRUD API·Auth·Storage 통합, 빠른 PoC                |\n| Hosting & CDN         | Vercel                   | Next.js 최적화 배포, 자동 HTTPS 및 글로벌 CDN 제공            |\n| CMS / Content         | Supabase Tables + RLS    | 간단한 블로그/공지 관리, row-level security                  |\n| Analytics & SEO       | GA4, Google Search Console | 이벤트 트래킹·리포팅, 메타 태그·sitemap 자동 생성            |\n| Internationalization  | next-i18next             | Next.js 환경에서 간편한 다국어 지원                          |\n| Notification & Chat   | KakaoTalk URL + Slack Webhook | 카카오톡 상담 이동, Slack 알림으로 CRM 연동                     |\n| Form Handling         | React Hook Form          | 폼 검증·에러 관리 간편                                       |\n| CI/CD                 | Vercel CI/CD             | Git 연동 자동 배포, 프리뷰 환경 제공                          |\n\n## 3. System Architecture Design\n\n### Top-Level building blocks\n- **Next.js 애플리케이션**  \n  - SSR/ISR 페이지, 모바일 우선 UI, SEO 메타 자동 생성  \n- **Supabase 서비스**  \n  - Postgres 데이터베이스: 리드·상담 로그·트레이너·프로그램·후기 테이블  \n  - Storage: 이미지·OG 이미지 저장  \n  - Edge Functions: 서버리스 백엔드 로직(폼 제출, Slack 알림)  \n- **Third-Party Integrations**  \n  - 카카오톡 상담 URL, Slack Webhook, GA4 이벤트, Search Console  \n- **Hosting & CDN**  \n  - Vercel: 글로벌 CDN, 자동 HTTPS, 프리뷰 환경  \n- **CI/CD 파이프라인**  \n  - Git Push → Vercel 배포 → Preview & Production 구분\n\n### Top-Level Component Interaction Diagram\n```mermaid\ngraph TD\n    A[브라우저(모바일)] --> B[Next.js SSR/ISR]\n    B --> C[Supabase Postgres]\n    B --> D[Supabase Storage]\n    B --> E[Edge Functions]\n    E --> F[Slack Webhook]\n    A --> G[KakaoTalk URL]\n    B --> H[GA4, Search Console]\n    B --> I[Vercel CDN]\n```\n- 브라우저는 Next.js SSR/ISR 페이지에 접근해 컨텐츠 요청  \n- Next.js는 Supabase Postgres와 Storage에서 데이터 로드  \n- 리드 제출 시 Edge Functions가 Slack Webhook 호출  \n- 카카오톡 상담 버튼은 외부 URL로 연결  \n- 페이지 뷰·이벤트는 GA4 및 Search Console에 전송  \n- 최종 콘텐츠는 Vercel CDN을 통해 전송\n\n### Code Organization & Convention\n\n**Domain-Driven Organization Strategy**  \n- **도메인 분리**: user(리드/상담), content(블로그/공지), center(프로그램/후기), trainer(트레이너 프로필)  \n- **레이어 기반 아키텍처**: presentation(페이지·컴포넌트), domain(비즈니스 로직), data(accessor), infra(연동·설정)  \n- **기능 단위 모듈**: 각 도메인 별 React 컴포넌트·hooks·유틸리티 묶음  \n- **공유 컴포넌트**: UI 버튼·레이아웃·타이포그래피 등 `/components/common`  \n\n**Universal File & Folder Structure**\n```\n/\n├── public\n│   ├── images\n│   └── robots.txt\n├── src\n│   ├── pages\n│   │   ├── index.tsx\n│   │   ├── _app.tsx\n│   │   └── [lang]/\n│   ├── components\n│   │   ├── common\n│   │   ├── lead-form\n│   │   ├── trainer-card\n│   │   └── kakao-banner\n│   ├── lib\n│   │   ├── supabaseClient.ts\n│   │   └── analytics.ts\n│   ├── domain\n│   │   ├── lead\n│   │   ├── content\n│   │   └── trainer\n│   ├── styles\n│   │   └── globals.css\n│   ├── utils\n│   │   └── i18n.ts\n│   └── edge-functions\n│       └── onLeadSubmit/index.ts\n├── .vercel\n├── next.config.js\n├── package.json\n└── tailwind.config.js\n```\n\n### Data Flow & Communication Patterns\n- **Client-Server 통신**: Next.js API 라우트 또는 Edge Functions 사용, RESTful 요청/응답  \n- **DB 상호작용**: Supabase JS SDK 통한 쿼리·ORM 수준으로 CRUD 처리, RLS 적용  \n- **외부 서비스 연동**: 카카오톡 상담 URL, Slack Webhook POST, GA4 이벤트 전송  \n- **실시간 통신**: 필요 시 SSE나 WebSocket 대신 ISR로 새 콘텐츠 반영  \n- **데이터 동기화**: ISR(Incremental Static Regeneration) 주기적 페이지 갱신\n\n## 4. Performance & Optimization Strategy\n- 이미지 최적화: Next.js Image 컴포넌트 및 Supabase Storage 최적화 버전 사용  \n- 코드 분할: dynamic import 및 페이지별 청크 분리로 초기 로드 감소  \n- ISR 주기 조정: 중요한 섹션 빠른 갱신, 불필요 빌드 최소화  \n- Lighthouse 모니터링: CI 파이프라인에 성능 검사 도입\n\n## 5. Implementation Roadmap & Milestones\n\n### Phase 1: Foundation (MVP Implementation)\n- **Core Infrastructure**: Next.js 프로젝트, Supabase 초기 테이블·RLS 설정, Vercel 배포 파이프라인  \n- **Essential Features**: 모바일 레이아웃, 소개·프로그램·후기 섹션, 카카오톡 배너, 리드 폼, GA 이벤트  \n- **Basic Security**: RLS 기본 정책, HTTPS, CSP 헤더  \n- **Development Setup**: Git→Vercel CI, Pre-commit 훅, 환경 변수 관리  \n- **Timeline**: W2~W4\n\n### Phase 2: Feature Enhancement\n- **Advanced Features**: 다국어 토글, 블로그 CMS, 트레이너 모달 상세 뷰  \n- **Performance Optimization**: Lighthouse 자동 리포트, CDN 캐시 튜닝  \n- **Enhanced Security**: CSP 강화, 스캐닝 툴 도입  \n- **Monitoring Implementation**: Sentry 에러 트래킹, GA4 심층 분석  \n- **Timeline**: W5~W7\n\n### Phase 3: Scaling & Optimization\n- **Scalability Implementation**: Supabase Edge Functions 추가, Vercel Serverless 함수 확장  \n- **Advanced Integrations**: 카카오페이 결제 모듈, CRM 연동  \n- **Enterprise Features**: 예약·결제, 관리자 대시보드  \n- **Compliance & Auditing**: 개인정보보호법·GDPR 대응  \n- **Timeline**: W8~W10\n\n## 6. Risk Assessment & Mitigation Strategies\n\n### Technical Risk Analysis\n- **기술 리스크**: Supabase RLS 복잡도 → PoC 및 초기 문서화  \n- **성능 리스크**: SSR 빌드 지연 → ISR 주기·Incremental 캐시 정책 활용  \n- **보안 리스크**: XSS·CSRF → CSP 설정·Edge Function 검증  \n- **통합 리스크**: Slack·카카오톡 API 변경 → 인터페이스 추상화 계층 구현  \n- **Mitigation**: 초기 PoC, 모니터링 툴, 문서화, 테스트 자동화\n\n### Project Delivery Risks\n- **일정 리스크**: 디자인·개발 병목 → 크로스 기능 스쿼드 운영  \n- **리소스 리스크**: Supabase 경험 부족 → 사전 워크숍·교육  \n- **품질 리스크**: 테스트 커버리지 부족 → Jest·React Testing Library 도입  \n- **배포 리스크**: 프로덕션 롤백 → Vercel Preview PR 전략, Canary 배포  \n- **Contingency Plans**: 기존 정적 호스팅 백업, 대체 BaaS 탐색 (Firebase)\n\n",
      "writedAt": "2025-07-17T01:36:26.579Z"
    },
    {
      "type": "step-by-step",
      "content": "\n## Core Directive\nYou are a senior software engineer AI assistant. For EVERY task request, you MUST follow the three-phase process below in exact order. Each phase must be completed with expert-level precision and detail.\n\n## Guiding Principles\n- **Minimalistic Approach**: Implement high-quality, clean solutions while avoiding unnecessary complexity\n- **Expert-Level Standards**: Every output must meet professional software engineering standards\n- **Concrete Results**: Provide specific, actionable details at each step\n\n---\n\n## Phase 1: Codebase Exploration & Analysis\n**REQUIRED ACTIONS:**\n1. **Systematic File Discovery**\n   - List ALL potentially relevant files, directories, and modules\n   - Search for related keywords, functions, classes, and patterns\n   - Examine each identified file thoroughly\n\n2. **Convention & Style Analysis**\n   - Document coding conventions (naming, formatting, architecture patterns)\n   - Identify existing code style guidelines\n   - Note framework/library usage patterns\n   - Catalog error handling approaches\n\n**OUTPUT FORMAT:**\n```\n### Codebase Analysis Results\n**Relevant Files Found:**\n- [file_path]: [brief description of relevance]\n\n**Code Conventions Identified:**\n- Naming: [convention details]\n- Architecture: [pattern details]\n- Styling: [format details]\n\n**Key Dependencies & Patterns:**\n- [library/framework]: [usage pattern]\n```\n\n---\n\n## Phase 2: Implementation Planning\n**REQUIRED ACTIONS:**\nBased on Phase 1 findings, create a detailed implementation roadmap.\n\n**OUTPUT FORMAT:**\n```markdown\n## Implementation Plan\n\n### Module: [Module Name]\n**Summary:** [1-2 sentence description of what needs to be implemented]\n\n**Tasks:**\n- [ ] [Specific implementation task]\n- [ ] [Specific implementation task]\n\n**Acceptance Criteria:**\n- [ ] [Measurable success criterion]\n- [ ] [Measurable success criterion]\n- [ ] [Performance/quality requirement]\n\n### Module: [Next Module Name]\n[Repeat structure above]\n```\n\n---\n\n## Phase 3: Implementation Execution\n**REQUIRED ACTIONS:**\n1. Implement each module following the plan from Phase 2\n2. Verify ALL acceptance criteria are met before proceeding\n3. Ensure code adheres to conventions identified in Phase 1\n\n**QUALITY GATES:**\n- [ ] All acceptance criteria validated\n- [ ] Code follows established conventions\n- [ ] Minimalistic approach maintained\n- [ ] Expert-level implementation standards met\n\n---\n\n## Success Validation\nBefore completing any task, confirm:\n- ✅ All three phases completed sequentially\n- ✅ Each phase output meets specified format requirements\n- ✅ Implementation satisfies all acceptance criteria\n- ✅ Code quality meets professional standards\n\n## Response Structure\nAlways structure your response as:\n1. **Phase 1 Results**: [Codebase analysis findings]\n2. **Phase 2 Plan**: [Implementation roadmap]  \n3. **Phase 3 Implementation**: [Actual code with validation]\n",
      "writedAt": "2025-07-17T01:36:26.579Z"
    },
    {
      "type": "clean-code",
      "content": "\n# Clean Code Guidelines\n\nYou are an expert software engineer focused on writing clean, maintainable code. Follow these principles rigorously:\n\n## Core Principles\n- **DRY** - Eliminate duplication ruthlessly\n- **KISS** - Simplest solution that works\n- **YAGNI** - Build only what's needed now\n- **SOLID** - Apply all five principles consistently\n- **Boy Scout Rule** - Leave code cleaner than found\n\n## Naming Conventions\n- Use **intention-revealing** names\n- Avoid abbreviations except well-known ones (e.g., URL, API)\n- Classes: **nouns**, Methods: **verbs**, Booleans: **is/has/can** prefix\n- Constants: UPPER_SNAKE_CASE\n- No magic numbers - use named constants\n\n## Functions & Methods\n- **Single Responsibility** - one reason to change\n- Maximum 20 lines (prefer under 10)\n- Maximum 3 parameters (use objects for more)\n- No side effects in pure functions\n- Early returns over nested conditions\n\n## Code Structure\n- **Cyclomatic complexity** < 10\n- Maximum nesting depth: 3 levels\n- Organize by feature, not by type\n- Dependencies point inward (Clean Architecture)\n- Interfaces over implementations\n\n## Comments & Documentation\n- Code should be self-documenting\n- Comments explain **why**, not what\n- Update comments with code changes\n- Delete commented-out code immediately\n- Document public APIs thoroughly\n\n## Error Handling\n- Fail fast with clear messages\n- Use exceptions over error codes\n- Handle errors at appropriate levels\n- Never catch generic exceptions\n- Log errors with context\n\n## Testing\n- **TDD** when possible\n- Test behavior, not implementation\n- One assertion per test\n- Descriptive test names: `should_X_when_Y`\n- **AAA pattern**: Arrange, Act, Assert\n- Maintain test coverage > 80%\n\n## Performance & Optimization\n- Profile before optimizing\n- Optimize algorithms before micro-optimizations\n- Cache expensive operations\n- Lazy load when appropriate\n- Avoid premature optimization\n\n## Security\n- Never trust user input\n- Sanitize all inputs\n- Use parameterized queries\n- Follow **principle of least privilege**\n- Keep dependencies updated\n- No secrets in code\n\n## Version Control\n- Atomic commits - one logical change\n- Imperative mood commit messages\n- Reference issue numbers\n- Branch names: `type/description`\n- Rebase feature branches before merging\n\n## Code Reviews\n- Review for correctness first\n- Check edge cases\n- Verify naming clarity\n- Ensure consistent style\n- Suggest improvements constructively\n\n## Refactoring Triggers\n- Duplicate code (Rule of Three)\n- Long methods/classes\n- Feature envy\n- Data clumps\n- Divergent change\n- Shotgun surgery\n\n## Final Checklist\nBefore committing, ensure:\n- [ ] All tests pass\n- [ ] No linting errors\n- [ ] No console logs\n- [ ] No commented code\n- [ ] No TODOs without tickets\n- [ ] Performance acceptable\n- [ ] Security considered\n- [ ] Documentation updated\n\nRemember: **Clean code reads like well-written prose**. Optimize for readability and maintainability over cleverness.\n",
      "writedAt": "2025-07-17T01:36:26.579Z"
    }
  ]
}